{"version":3,"sources":["config/Index.js","servers/RequestUtil.js","servers/RequestDispatch.js","servers/LoginService.js","servers/DashboardService.js","servers/APIService.js"],"names":["serviceURL","module","exports","getServiceURL","RequestUtil","method","path","request","params","headers","url","includes","paramsArray","Object","keys","forEach","key","push","encodeURIComponent","length","join","Request","credentials","bodyStr","JSON","stringify","body","RequestDispatch","responseType","fetch","then","res","status","json","catch","msg","code","LoginService","login","obj","seriesRequest","handleRequest","register","email","DashboardService","fetchUserInfo","APIService"],"mappings":"6GAAA,IAAMA,EAEO,wBAWbC,EAAOC,QAAU,CACbC,cAAe,WACX,OAAOH,K,iECPMI,E,kGAEjB,SAAqBC,EAAQC,GAAkC,IAOvDC,EAP2BC,EAA2B,uDAAlB,GAAIC,EAAc,uDAAJ,GAClDC,EAAG,UAAMP,2BAAN,OAAwBG,GAO/B,GANIA,EAAKK,SAAS,UAASD,EAAMJ,GAMlB,QAAXD,GAA+B,WAAXA,EAAqB,CACzC,IAAIO,EAAc,GAElBC,OAAOC,KAAKN,GAAQO,SAAQ,SAACC,GAAD,OAASJ,EAAYK,KAAKD,EAAM,IAAME,mBAAmBV,EAAOQ,QACxFJ,EAAYO,OAAS,IACrBT,GAAO,IAAME,EAAYQ,KAAK,MAGlCb,EAAU,IAAIc,QAAQX,EAAK,CACvBL,OAAQA,EACRI,QAASA,SAEV,GAAe,SAAXJ,EAAmB,CAC1B,IAAIO,EAAc,GAElBC,OAAOC,KAAKN,GAAQO,SAAQ,SAACC,GAAD,OAASJ,EAAYK,KAAKD,EAAM,IAAME,mBAAmBV,EAAOQ,QACxFJ,EAAYO,OAAS,IACrBT,GAAO,IAAME,EAAYQ,KAAK,MAElCb,EAAU,IAAIc,QAAQX,EAAK,CACvBL,OAAQ,MACRI,QAASA,EACTa,YAAa,gBAEd,CACH,IAAIC,EAAUC,KAAKC,UAAUjB,GAEd,SAAXH,EACAE,EAAU,IAAIc,QAAQX,EAAK,CACvBL,OAAQ,OACRI,QAASA,EACTiB,KAAMH,IAEQ,QAAXlB,EACPE,EAAU,IAAIc,QAAQX,EAAK,CACvBL,OAAQ,MACRI,QAASA,EACTiB,KAAMH,IAEQ,SAAXlB,EACPE,EAAU,IAAIc,QAAQX,EAAK,CACvBL,OAAQ,MACRI,QAASA,EACTa,YAAa,UACbI,KAAMH,IAEQ,UAAXlB,IAEPE,EAAU,IAAIc,QAAQX,EAAK,CACvBL,OAAQ,OACRI,QAASA,EACTiB,KAAMH,EACND,YAAa,aAIzB,OAAOf,M,KCrEMoB,E,kGAKjB,SAAqBpB,EAASqB,GAC1B,MAAqB,gBAAjBA,EACOC,MAAMtB,GAENsB,MAAMtB,GACRuB,MAAK,SAACC,GACH,GAAIA,EAAIC,QAAU,KAAOD,EAAIC,QAAU,IACnC,OAAOD,EAAIE,OAEX,MAAMF,KAGbD,MAAK,SAACC,GACH,OAAOA,KAEVG,OAAM,SAACH,GACJ,GAAW,8BAAPA,GAA8C,6CAAPA,EAA3C,CAIA,IAAII,EAAM,2BAaV,OAZmB,MAAfJ,EAAIC,OACJG,EAAM,2EACC,MAAQJ,EAAIC,OACnBG,EAAM,uCACC,MAAQJ,EAAIC,OACnBG,EAAM,uCACC,MAAQJ,EAAIC,OACnBG,EAAM,iCACCJ,EAAIC,QAAU,KAAOD,EAAIC,OAAS,MACzCG,EAAM,oDAGH,CAAEC,KAAML,EAAIC,OAAQG,IAAKA,W,KCnCvCE,EAAe,CASxBC,MAAO,SAAUC,GACb,IAAIhC,EAAUH,EAAYoC,cACtB,MACA,sEAEJ,OAAOb,EAAgBc,cAAclC,IAGzCmC,SAAU,SAAUH,GAChB,IAAIhC,EAAUH,EAAYoC,cAAc,MAA1B,oCAA8DD,EAAII,QAChF,OAAOhB,EAAgBc,cAAclC,KCnBhCqC,EAAmB,CAC5BC,cAAe,SAAUN,GACrB,IAAIhC,EAAUH,EAAYoC,cACtB,MACA,0EAEJ,OAAOb,EAAgBc,cAAclC,KCXvCuC,EAAU,2BACTT,GACAO,GAGQE","file":"static/js/1.127ddc14.chunk.js","sourcesContent":["const serviceURL = {\r\n    RELATIVE_URL: \"\",\r\n    DEV_URL: \"https://api.aibank.jp\", //测试\r\n\r\n    //hui\r\n    // RELATIVE_URL: \"\",\r\n    // DEV_URL: \"http://192.168.168.227:9000\", //开发地址\r\n\r\n    //hao\r\n    // RELATIVE_URL: \"\",\r\n    // DEV_URL: \"http://192.168.68.244:8001\", //开发地址\r\n};\r\n\r\nmodule.exports = {\r\n    getServiceURL: () => {\r\n        return serviceURL.DEV_URL;\r\n    },\r\n};\r\n","/*\r\n * @Description: Request请求封装\r\n * @Author: lzg\r\n * @Date: 2020-09-22\r\n */\r\n\r\nimport { getServiceURL } from \"../config/Index\";\r\n\r\nexport default class RequestUtil {\r\n    //常用请求\r\n    static seriesRequest(method, path, params = {}, headers = {}) {\r\n        let url = `${getServiceURL()}${path}`;\r\n        if (path.includes(\"http\")) url = path;\r\n\r\n        // headers[\"Content-Type\"] = \"multipart/form-data ;charset=utf-8\";\r\n        // headers[\"Authorization\"] = \"Bearer \" + MyStorage.load(\"token\");\r\n\r\n        let request;\r\n        if (method === \"GET\" || method === \"DELETE\") {\r\n            let paramsArray = [];\r\n            //encodeURIComponent\r\n            Object.keys(params).forEach((key) => paramsArray.push(key + \"=\" + encodeURIComponent(params[key])));\r\n            if (paramsArray.length > 0) {\r\n                url += \"?\" + paramsArray.join(\"&\");\r\n            }\r\n\r\n            request = new Request(url, {\r\n                method: method,\r\n                headers: headers,\r\n            });\r\n        } else if (method === \"GETF\") {\r\n            let paramsArray = [];\r\n            //encodeURIComponent\r\n            Object.keys(params).forEach((key) => paramsArray.push(key + \"=\" + encodeURIComponent(params[key])));\r\n            if (paramsArray.length > 0) {\r\n                url += \"?\" + paramsArray.join(\"&\");\r\n            }\r\n            request = new Request(url, {\r\n                method: \"GET\",\r\n                headers: headers,\r\n                credentials: \"include\",\r\n            });\r\n        } else {\r\n            let bodyStr = JSON.stringify(params);\r\n\r\n            if (method === \"POST\") {\r\n                request = new Request(url, {\r\n                    method: \"POST\",\r\n                    headers: headers,\r\n                    body: bodyStr,\r\n                });\r\n            } else if (method === \"PUT\") {\r\n                request = new Request(url, {\r\n                    method: \"PUT\",\r\n                    headers: headers,\r\n                    body: bodyStr,\r\n                });\r\n            } else if (method === \"PUTF\") {\r\n                request = new Request(url, {\r\n                    method: \"PUT\",\r\n                    headers: headers,\r\n                    credentials: \"include\",\r\n                    body: bodyStr,\r\n                });\r\n            } else if (method === \"POSTF\") {\r\n                // 域账号登陆\r\n                request = new Request(url, {\r\n                    method: \"POST\",\r\n                    headers: headers,\r\n                    body: bodyStr,\r\n                    credentials: \"include\",\r\n                });\r\n            }\r\n        }\r\n        return request;\r\n    }\r\n}\r\n","/*\r\n * @Description: 请求分发处理\r\n * @Author: zhangbo\r\n * @Date: 2020-09-22\r\n */\r\nexport default class RequestDispatch {\r\n    /* Params\r\n     ** 1、fetch参数\r\n     ** 2、控制是否直接返回数据\r\n     */\r\n    static handleRequest(request, responseType) {\r\n        if (responseType === \"arrayBuffer\") {\r\n            return fetch(request);\r\n        } else {\r\n            return fetch(request)\r\n                .then((res) => {\r\n                    if (res.status >= 200 && res.status <= 300) {\r\n                        return res.json();\r\n                    } else {\r\n                        throw res;\r\n                    }\r\n                })\r\n                .then((res) => {\r\n                    return res;\r\n                })\r\n                .catch((res) => {\r\n                    if (res == \"TypeError: Failed to fetch\" || res == \"SyntaxError: Unexpected end of JSON input\") {\r\n                        return;\r\n                    }\r\n\r\n                    let msg = \"请求失败\";\r\n                    if (res.status === 401) {\r\n                        msg = \"授权认证失败，请重新登陆\";\r\n                    } else if (500 === res.status) {\r\n                        msg = \"服务请求异常\";\r\n                    } else if (403 === res.status) {\r\n                        msg = \"接口禁止访问\";\r\n                    } else if (404 === res.status) {\r\n                        msg = \"服务不存在\";\r\n                    } else if (res.status >= 400 && res.status < 500) {\r\n                        msg = \"请求数据格式错误\";\r\n                    }\r\n\r\n                    return { code: res.status, msg: msg };\r\n                });\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @Description: 业务api接口\r\n * @Author: zhangbo\r\n * @Date: 2020-09-22\r\n */\r\nimport RequestUtil from \"./RequestUtil\";\r\nimport RequestDispatch from \"./RequestDispatch\";\r\n\r\nexport const LoginService = {\r\n    //登录\r\n    // login: function (obj) {\r\n    //     let request = RequestUtil.seriesRequest(\"POST\", \"/api/sys/auth/login\", obj, {\r\n    //         \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n    //     });\r\n    //     return RequestDispatch.handleRequest(request, \"\", true);\r\n    // },\r\n\r\n    login: function (obj) {\r\n        let request = RequestUtil.seriesRequest(\r\n            \"GET\",\r\n            \"https://raw.githubusercontent.com/bing-deng/Demo/master/login.json\"\r\n        );\r\n        return RequestDispatch.handleRequest(request);\r\n    },\r\n\r\n    register: function (obj) {\r\n        let request = RequestUtil.seriesRequest(\"GET\", `/saas/user/register?email=${obj.email}`);\r\n        return RequestDispatch.handleRequest(request);\r\n    },\r\n};\r\n","/*\r\n * @Description: 业务api接口\r\n * @Author: zhangbo\r\n * @Date: 2020-09-22\r\n */\r\nimport RequestUtil from \"./RequestUtil\";\r\nimport RequestDispatch from \"./RequestDispatch\";\r\n\r\nexport const DashboardService = {\r\n    fetchUserInfo: function (obj) {\r\n        let request = RequestUtil.seriesRequest(\r\n            \"GET\",\r\n            \"https://raw.githubusercontent.com/bing-deng/Demo/master/dashboard.json\"\r\n        );\r\n        return RequestDispatch.handleRequest(request);\r\n    },\r\n};\r\n","import { LoginService } from \"./LoginService\";\r\nimport { DashboardService } from \"./DashboardService\";\r\n\r\nconst APIService = {\r\n    ...LoginService,\r\n    ...DashboardService,\r\n};\r\n\r\nexport default APIService;\r\n"],"sourceRoot":""}